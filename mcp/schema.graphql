# This schema uses Apollo Connectors, a declarative programming model for
# GraphQL that allows you to plug in your existing REST services directly into
# a graph. To learn more, visit Apollo's documentation: ðŸ”—https://www.apollographql.com/docs/graphos/schema-design/connectors

# Guided tutorial: ðŸ”— https://www.apollographql.com/docs/graphos/get-started/guides/rest

extend schema
  @link( # Enable this schema to use Apollo Federation features
    url: "https://specs.apollo.dev/federation/v2.12"
  )
  @link( # Enable this schema to use Apollo Connectors
    url: "https://specs.apollo.dev/connect/v0.3"
    import: ["@connect", "@source"]
  )

# This schema connects to the Algolia Search API for Siimple templates
@source(
  name: "algolia"
  # A @source directive defines a shared data source for multiple Connectors.
  http: {
    baseURL: "https://9UHBKTAEPW.algolia.net" 
    headers: [
      { name: "Content-Type", value: "application/json" },
      { name: "X-Algolia-Application-Id", value: "9UHBKTAEPW" },
      { name: "X-Algolia-API-Key", value: "d9c3eef0a2f40553f632c84939ce6793" }
    ]
  }
)

# This schema connects to the Intercom Articles API for documentation
@source(
  name: "intercom"
  http: {
    baseURL: "https://api.intercom.io"
    headers: [
      { name: "Content-Type", value: "application/json" },
      { name: "Accept", value: "application/json" },
      { name: "Authorization", value: "Bearer {$env.INTERCOM_ACCESS_TOKEN}" }
    ]
  }
)

# Template data from Algolia search results
type Template {
  objectID: String!
  name: String!
  description: String
  theme: String
  demoUrl: String
  keywords: String
  siteId: String
  image: String
}

# Intercom Article
type Article {
  id: String!
  type: String!
  workspace_id: String!
  title: String!
  description: String
  body: String
  author_id: String!
  state: String!
  created_at: Int!
  updated_at: Int!
  url: String
  parent_id: String
  parent_ids: [String]
  parent_type: String
  default_locale: String
}

# Intercom Articles List Response
type ArticlesResponse {
  type: String!
  total_count: Int!
  pages: Int
  data: [Article]
}

type Query {
  # Browse all templates from Algolia
  templates(hitsPerPage: Int = 20): [Template]
    @connect(
      source: "algolia"
      http: {
        GET: "/1/indexes/demoSites/browse"
        queryParams: "hitsPerPage: $args.hitsPerPage->match([null, 20], [@, @])"
      }
      selection: """
      $.hits {
        objectID
        name
        description
        theme
        demoUrl
        keywords
        siteId
        image
      }
      """
    )
  
  # Search templates using Algolia search
  searchTemplates(query: String!): [Template]
    @connect(
      source: "algolia"
      http: {
        POST: "/1/indexes/demoSites/query"
        body: """
        $(
          {
            "query": $args.query
          }
        )
        """
      }
      selection: """
      $.hits {
        objectID
        name
        description
        theme
        demoUrl
        keywords
        siteId
        image
      }
      """
    )
  
  # List all articles from Intercom
  articles(phrase: String!,page: Int = 1, per_page: Int = 20): ArticlesResponse
    @connect(
      source: "intercom"
      http: {
        GET: "/articles/search"
        queryParams: "$args { phrase page per_page }"
      }
      selection: """
      $ {
        type
        total_count
        pages: $.pages.total_pages
        data: $.data.articles {
          id
          type
          workspace_id
          title
          description
          body
          author_id
          state
          created_at
          updated_at
          url
          parent_id
          parent_ids
          parent_type
          default_locale
        }
      }
      """
    )
  
  # Get a specific article by ID
  article(id: String!): Article
    @connect(
      source: "intercom"
      http: {
        GET: "/articles/{$args.id}"
      }
      selection: """
      $ {
        id
        type
        workspace_id
        title
        description
        body
        author_id
        state
        created_at
        updated_at
        url
        parent_id
        parent_ids
        parent_type
        default_locale
      }
      """
    )
  
  # Search articles in Intercom
  searchArticles(phrase: String!, state: String = "published", highlight: Boolean = false): ArticlesResponse
    @connect(
      source: "intercom"
      http: {
        GET: "/articles/search"
        queryParams: "$args { phrase state highlight }"
      }
      selection: """
      $ {
        type
        total_count
        pages: $.pages.total_pages
        data: $.data.articles {
          id
          type
          workspace_id
          title
          description
          body
          author_id
          state
          created_at
          updated_at
          url
          parent_id
          parent_ids
          parent_type
          default_locale
        }
      }
      """
    )
}
